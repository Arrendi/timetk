% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make-tk_make_date_sequences.R
\name{tk_make_date_sequence}
\alias{tk_make_date_sequence}
\title{Intelligent date and date-time sequence creation}
\usage{
tk_make_date_sequence(
  start_date,
  end_date,
  by,
  length_out = NULL,
  skip_values = NULL,
  insert_values = NULL
)
}
\arguments{
\item{start_date}{Used to define the starting date for date sequence generation.
Provide in "YYYY-MM-DD" format.}

\item{end_date}{Used to define the ending date for date sequence generation.
Provide in "YYYY-MM-DD" format.}

\item{by}{A character string, containing one of
\code{"sec"}, \code{"min"}, \code{"hour"}, \code{"day"}, \code{"week"}, \code{"month"}, \code{"quarter"} or \code{"year"}.
You can create regularly spaced sequences using phrases like \code{by = "10 min"}.}

\item{length_out}{Optional length of the sequence. Can be used instead of one of:
\code{start_date}, \code{end_date}, or \code{by}.}

\item{skip_values}{A sequence to skip}

\item{insert_values}{A sequence to insert}
}
\value{
A vector containing date or date-times
}
\description{
Improves on the \code{seq.Date()} and \code{seq.POSIXct()} functions by simplifying
into 1 function \code{tk_make_date_sequence()}. Intelligently handles character dates,
parsing and guessing logical classes based on the user inputs.
}
\details{
The \code{tk_make_date_sequence()} function handles both date and date-time sequences
automatically.
\itemize{
\item Parses date and date times from character
\item Intelligently guesses the sequence desired based on arguments provided
\item Handles spacing intelligently
\item When both \code{by} and \code{length_out} are missing, guesses either second or day sequences
\item Can skip and insert values if needed.
}

\strong{Daily Sequences}

Make a daily sequence with \code{tk_make_date_sequence(by)}. Examples:
\itemize{
\item Every Day: \code{by = "day"}
\item Every 2-Weeks: \code{by = "2 weeks"}
\item Every 6-months: \code{by = "6 months"}
}

\strong{Sub-Daily Sequences}

Make a sub-daily sequence with \code{tk_make_date_sequence(by)}. Examples:
\itemize{
\item Every minute: \code{by = "min"}
\item Every 30-seconds: \code{by = "30 sec"}
\item Every 2-hours: \verb{by = "2 hours}
}

\strong{Skip / Insert Timestamps}

Skips and inserts are performed after the sequence is generated. This means that if you use
the \code{length_out} parameter, the length may differ than the \code{length_out}.
}
\examples{
library(dplyr)
library(tidyquant)
library(timetk)

options(max.print = 50)

# ---- BASIC DATE SEQUENCE EXAMPLES ----

# Date Sequence - By Day
tk_make_date_sequence("2017-01-01", "2017-12-31") # Guesses by = "day"

# Date Sequence - By Day
tk_make_date_sequence("2012-01-01", length_out = 6) # Guesses by = "day"

# Date Sequence - By Month
tk_make_date_sequence("2012-01-01", by = "1 month", length_out = 6) # Switch to month


# ---- BASIC DATE-TIME SEQUENCE EXAMPLES ----

# Date-Time Sequence - By Second
tk_make_date_sequence("2016-01-01 01:01:02", "2016-01-01 01:01:04") # Guesses by second

# Date-Time Sequence - By 10 Minutes
# - Converts to date-time automatically & applies 10-min interval
tk_make_date_sequence("2017-01-01", "2017-01-02", by = "10 min")



}
\seealso{
\itemize{
\item Intelligent date or date-time sequence creation: \code{\link[=tk_make_date_sequence]{tk_make_date_sequence()}}
\item Holidays and weekends: \code{\link[=tk_make_holiday_sequence]{tk_make_holiday_sequence()}}, \code{\link[=tk_make_weekend_sequence]{tk_make_weekend_sequence()}}, \code{\link[=tk_make_weekday_sequence]{tk_make_weekday_sequence()}}
\item Make future index from existing: \code{\link[=tk_make_future_timeseries]{tk_make_future_timeseries()}}
}
}
